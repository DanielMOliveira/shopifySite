trigger:
  branches:
    include:
      - main
      - dev
      - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  - group: shopify-credentials-zippyDev

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install Node.js'

  - script: |
      echo "🧼 Cleaning npm cache..."
      npm cache clean --force
  
      echo "📦 Installing Shopify CLI..."
      npm install -g @shopify/cli@latest
  
      echo "🔍 Installing linting tools..."
      npm install -g eslint stylelint prettier
  
      echo "✅ Tools installed:"
      shopify version
      eslint -v
      stylelint -v
      prettier -v
    displayName: 'Install Shopify CLI and linting tools'


  - script: |
      BRANCH=$(echo "$(Build.SourceBranchName)")
      CONFIG_FILE="deploy/config.json"
      echo "Detectando configurações para o branch: $BRANCH"

      STORE=$(jq -r ".\"$BRANCH\".store" $CONFIG_FILE)
      THEME_ID=$(jq -r ".\"$BRANCH\".theme_id" $CONFIG_FILE)
      PUBLISH=$(jq -r ".\"$BRANCH\".publish" $CONFIG_FILE)
      THEME_FOLDER=$(jq -r ".\"$BRANCH\".theme_folder" $CONFIG_FILE)

      if [ "$STORE" = "null" ] || [ "$THEME_ID" = "null" ] || [ "$THEME_FOLDER" = "null" ]; then
        echo "Erro: configuração incompleta para a branch '$BRANCH'"
        exit 1
      fi

      echo "##vso[task.setvariable variable=SHOPIFY_STORE_URL]$STORE"
      echo "##vso[task.setvariable variable=THEME_ID]$THEME_ID"
      echo "##vso[task.setvariable variable=PUBLISH_THEME]$PUBLISH"
      echo "##vso[task.setvariable variable=THEME_FOLDER]$THEME_FOLDER"
    displayName: 'Ler configurações do config.json'

  - script: |
      mkdir -p lint-reports
      npx prettier --check "$THEME_FOLDER/**/*.{liquid,js,css,json}" > lint-reports/prettier.txt || true
    displayName: 'Check formatting with Prettier'

  - script: |
      mkdir -p lint-reports
      npx eslint "$THEME_FOLDER/**/*.js" > lint-reports/eslint.txt || true
    displayName: 'Run ESLint'

  - script: |
      mkdir -p lint-reports
      npx stylelint "$THEME_FOLDER/**/*.css" > lint-reports/stylelint.txt || true
    displayName: 'Run Stylelint'

  - script: |
      mkdir -p lint-reports
      shopify theme check --path "$THEME_FOLDER" > lint-reports/theme-check.txt || true
    displayName: 'Run Shopify Theme Check'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: 'lint-reports'
      ArtifactName: 'lint-results'
      publishLocation: 'Container'
    displayName: 'Publish lint artifacts'

  - script: |
      cd "$THEME_FOLDER"
      shopify theme push --store "$SHOPIFY_STORE_URL" --theme "$THEME_ID" --password "$SHOPIFY_THEME_TOKEN" --allow-live
    displayName: 'Push theme to Shopify'
    env:
      SHOPIFY_STORE_URL: $(SHOPIFY_STORE_URL)
      SHOPIFY_THEME_TOKEN: $(SHOPIFY_THEME_TOKEN)
      THEME_ID: $(THEME_ID)
      THEME_FOLDER: $(THEME_FOLDER)

  - script: |
      cd "$THEME_FOLDER"
      shopify theme publish --store "$SHOPIFY_STORE_URL" --theme "$THEME_ID" --password "$SHOPIFY_THEME_TOKEN" --allow-live
    displayName: 'Publish theme to Shopify'
    condition: and(succeeded(), eq(variables['PUBLISH_THEME'], 'true'))
    env:
      SHOPIFY_STORE_URL: $(SHOPIFY_STORE_URL)
      SHOPIFY_THEME_TOKEN: $(SHOPIFY_THEME_TOKEN)
      THEME_ID: $(THEME_ID)
      THEME_FOLDER: $(THEME_FOLDER)
